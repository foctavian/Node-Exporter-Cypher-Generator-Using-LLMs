from pydantic import BaseModel, Field
from typing import List, TypedDict
from dataclasses import dataclass

class cypher(BaseModel):
  problem: str = Field(description="problem to solve")
  cypher_script: str = Field(description="cypher script to run")

@dataclass
class SystemCypherScript(TypedDict): # this class is used to store the cypher scripts generated by the agent
  nodes: str=""
  relationships: str=""
  properties: str=""
  
@dataclass(frozen=True)
class Node(BaseModel):
  name: str = Field(description="name or id of the node")
  label: str = Field(description="label of the node, e.g. CPU, GPU, etc.")
  system: str = Field(description="system to which the node belongs")

@dataclass(frozen=True)
class Property(BaseModel):
  name: str = Field(description="name of the property")
  value: str | bool| int = Field(description="value of the property")
  node: Node = Field(description="node to which the property belongs")

@dataclass(frozen=True)
class Relationship(BaseModel):
  source: Node = Field(description="source node")
  target: Node  = Field(description="target node")
  relationship: str = Field(description="relationship between the nodes")

class InferredNodes(BaseModel):
  problem: str = Field(description="problem to solve")
  nodes: List[Node] = Field(description="list of the inferred nodes")

class InferredRelationships(BaseModel):
  problem: str = Field(description="problem to solve")
  relationships: List[Relationship] = Field(description="list of relationships to create")

class InferredProperties(BaseModel):
  problem: str = Field(description="problem to solve")
  properties: List[Property] = Field(description="list of properties to create")
  
class GraphState(TypedDict):
  error : str
  messages : List
  generation: str
  iterations : int
  script: SystemCypherScript
  traceback: bool = False